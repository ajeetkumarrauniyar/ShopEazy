generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Global roles at the User level
enum Role {
  SUPER_ADMIN
  ADMIN
  MEMBER
  GUEST
}

model User {
  id                 String               @id @default(uuid())
  clerkId            String               @unique
  phoneNumber        String               @unique
  emailAddress       String?              @unique
  firstName          String?
  lastName           String?
  // role               Role                 @default(USER)
  // isSubscribed       Boolean              @default(false)
  // subscriptionEnds   DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt()
  organizationMember OrganizationMember[]
  // createdOrgs        Organization[]       @relation("CreatedBy")
}

model Organization {
  id        String               @id @default(uuid())
  // clerkId   String   @unique
  name      String
  //   slug           String               @unique
  //   address        String?
  //   city           String?
  //   state          String?
  //   zipCode        String?
  //   country        String?
  //   logoUrl        String?
  //   website        String?
  //   gstIn          String?
  //   panNo          String?
  //   isActive       Boolean              @default(true)
  //   createdAt      DateTime             @default(now())
  //   updatedAt      DateTime             @updatedAt
  //   creatorId      String?
  //   creator        User?                @relation("CreatedBy", fields: [creatorId], references: [id])
  //   financialYears FinancialYear[]
  members   OrganizationMember[]
  //   products       Product[]
  //   subscription   Subscription?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model OrganizationMember {
  id             String   @id @default(uuid())
  userId         String
  organizationId String
  // role           MemberRole @default(MEMBER)
  role           Role
  //   invitationStatus InvitationStatus @default(ACTIVE)
  //   invitedEmail     String?
  //   invitedAt        DateTime?
  //   joinedAt         DateTime         @default(now())
  //   lastActive       DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
}

// model FinancialYear {
//   id             String       @id @default(uuid())
//   name           String?      @unique
//   startDate      DateTime
//   endDate        DateTime
//   isCurrent      Boolean      @default(false)
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
//   organizationId String
//   createdAt      DateTime     @default(now())
//   updatedAt      DateTime     @updatedAt

//   @@unique([organizationId, name])
//   @@index([organizationId])
// }

// model Product {
//   id             String       @id @default(uuid())
//   name           String
//   description    String?
//   price          Decimal      @db.Decimal(10, 2)
//   isActive       Boolean      @default(true)
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
//   organizationId String
//   createdAt      DateTime     @default(now())
//   updatedAt      DateTime     @updatedAt

//   @@index([organizationId])
// }

// model Subscription {
//   id               String       @id @default(uuid())
//   plan             PlanType     @default(FREE)
//   startDate        DateTime     @default(now())
//   endDate          DateTime?
//   isActive         Boolean      @default(true)
//   autoRenew        Boolean      @default(true)
//   stripeCustomerId String?
//   stripeSubId      String?
//   organization     Organization @relation(fields: [organizationId], references: [id])
//   organizationId   String       @unique
//   createdAt        DateTime     @default(now())
//   updatedAt        DateTime     @updatedAt
// }

// model AuditLog {
//   id             String   @id @default(uuid())
//   organizationId String?
//   userId         String?
//   action         String
//   entityType     String?
//   entityId       String?
//   oldValues      Json?
//   newValues      Json?
//   ipAddress      String?
//   userAgent      String?
//   createdAt      DateTime @default(now())

//   @@index([organizationId])
//   @@index([userId])
//   @@index([entityType, entityId])
//   @@index([createdAt])
// }

// //Organization-specific roles in OrganizationMember
// enum MemberRole {
//   OWNER
//   ADMIN
//   MEMBER
//   VIEWER
// }

// enum PlanType {
//   FREE
//   STANDARD
//   PREMIUM
//   ENTERPRISE
// }

// enum InvitationStatus {
//   PENDING
//   ACTIVE
//   DECLINED
// }
